import fitz  # PyMuPDF
import pymupdf4llm
import difflib

pdf_path = "SaiSanjayPotluri_Resume 1[1].pdf"

def extract_blocks(pdf_path):
    doc = fitz.open(pdf_path)
    blocks = []
    for page in doc:
        for block in page.get_text("dict", sort=True)["blocks"]:
            block_text = ""
            if "lines" in block:
                for line in block["lines"]:
                    line_text = " ".join(span["text"].strip() for span in line["spans"] if span["text"].strip())
                    if line_text:
                        block_text += line_text + "\n"
            block_text = block_text.strip()
            # Filter very short headings, focus on true content
            if block_text and len(block_text) > 5:
                blocks.append(block_text)
    doc.close()
    return blocks

blocks_code1 = extract_blocks(pdf_path)

md_text = pymupdf4llm.to_markdown(pdf_path)
blocks_code2 = [block.strip() for block in md_text.split('\n\n') if block.strip() and len(block.strip()) > 5]

# More refined fuzzy match filtering
def is_similar(b1, b2, threshold=0.65):
    """Case and whitespace-insensitive fuzzy matching within threshold."""
    b1 = b1.lower().strip()
    b2 = b2.lower().strip()
    return difflib.SequenceMatcher(None, b1, b2).ratio() > threshold

unique_code1_blocks = []
for block1 in blocks_code1:
    if not any(is_similar(block1, block2) for block2 in blocks_code2):
        unique_code1_blocks.append(block1)

final_blocks = blocks_code2 + unique_code1_blocks

print("Extracted Headings by Block (Refined, No Duplicates):\n")
for block in final_blocks:
    print(block)
    print("-" * 40)
